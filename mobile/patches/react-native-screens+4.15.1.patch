diff --git a/node_modules/react-native-screens/android/src/main/java/com/swmansion/rnscreens/gamma/tabs/TabScreenViewManager.kt b/node_modules/react-native-screens/android/src/main/java/com/swmansion/rnscreens/gamma/tabs/TabScreenViewManager.kt
index 9d35d8d..9b1b8f4 100644
--- a/node_modules/react-native-screens/android/src/main/java/com/swmansion/rnscreens/gamma/tabs/TabScreenViewManager.kt
+++ b/node_modules/react-native-screens/android/src/main/java/com/swmansion/rnscreens/gamma/tabs/TabScreenViewManager.kt
@@ -1,6 +1,13 @@
 package com.swmansion.rnscreens.gamma.tabs
 
+import android.content.Context
+import android.graphics.drawable.Drawable
 import android.util.Log
+import coil3.ImageLoader
+import coil3.asDrawable
+import coil3.request.ImageRequest
+import coil3.svg.SvgDecoder
+import com.facebook.react.bridge.Dynamic
 import com.facebook.react.bridge.ReadableMap
 import com.facebook.react.module.annotations.ReactModule
 import com.facebook.react.uimanager.ThemedReactContext
@@ -14,6 +21,7 @@ import com.swmansion.rnscreens.gamma.tabs.event.TabScreenDidAppearEvent
 import com.swmansion.rnscreens.gamma.tabs.event.TabScreenDidDisappearEvent
 import com.swmansion.rnscreens.gamma.tabs.event.TabScreenWillAppearEvent
 import com.swmansion.rnscreens.gamma.tabs.event.TabScreenWillDisappearEvent
+import com.swmansion.rnscreens.utils.RNSLog
 
 @ReactModule(name = TabScreenViewManager.REACT_CLASS)
 class TabScreenViewManager :
@@ -23,8 +31,19 @@ class TabScreenViewManager :
 
     override fun getName() = REACT_CLASS
 
+    var imageLoader: ImageLoader? = null
+
+    var context: ThemedReactContext? = null
+
     override fun createViewInstance(reactContext: ThemedReactContext): TabScreen {
-        Log.d(REACT_CLASS, "createViewInstance")
+        imageLoader =
+            ImageLoader
+                .Builder(reactContext)
+                .components {
+                    add(SvgDecoder.Factory())
+                }.build()
+        context = reactContext
+        RNSLog.d(REACT_CLASS, "createViewInstance")
         return TabScreen(reactContext)
     }
 
@@ -47,40 +66,14 @@ class TabScreenViewManager :
     }
 
     // These should be ignored or another component, dedicated for Android should be used
-
-    override fun setTabBarBackgroundColor(
-        view: TabScreen,
-        value: Int?,
-    ) = Unit
-
-    override fun setTabBarBlurEffect(
+    override fun setStandardAppearance(
         view: TabScreen,
-        value: String?,
+        value: Dynamic,
     ) = Unit
 
-    override fun setTabBarItemTitleFontFamily(
+    override fun setScrollEdgeAppearance(
         view: TabScreen,
-        value: String?,
-    ) = Unit
-
-    override fun setTabBarItemTitleFontSize(
-        view: TabScreen,
-        value: Float,
-    ) = Unit
-
-    override fun setTabBarItemTitleFontWeight(
-        view: TabScreen,
-        value: String?,
-    ) = Unit
-
-    override fun setTabBarItemTitleFontStyle(
-        view: TabScreen,
-        value: String?,
-    ) = Unit
-
-    override fun setTabBarItemTitleFontColor(
-        view: TabScreen,
-        value: Int?,
+        value: Dynamic,
     ) = Unit
 
     @ReactProp(name = "tabBarItemBadgeBackgroundColor", customType = "Color")
@@ -91,16 +84,6 @@ class TabScreenViewManager :
         view.tabBarItemBadgeBackgroundColor = value
     }
 
-    override fun setTabBarItemTitlePositionAdjustment(
-        view: TabScreen?,
-        value: ReadableMap?,
-    ) = Unit
-
-    override fun setTabBarItemIconColor(
-        view: TabScreen?,
-        value: Int?,
-    ) = Unit
-
     override fun setIconType(
         view: TabScreen?,
         value: String?,
@@ -132,7 +115,7 @@ class TabScreenViewManager :
         view: TabScreen,
         value: Boolean,
     ) {
-        Log.d(REACT_CLASS, "TabScreen [${view.id}] setIsFocused $value")
+        RNSLog.d(REACT_CLASS, "TabScreen [${view.id}] setIsFocused $value")
         view.isFocusedTab = value
     }
 
@@ -187,6 +170,102 @@ class TabScreenViewManager :
         view.iconResourceName = value
     }
 
+    override fun setOrientation(
+        view: TabScreen,
+        value: String?,
+    ) = Unit
+
+    override fun setSystemItem(
+        view: TabScreen,
+        value: String?,
+    ) = Unit
+
+    @ReactProp("iconResource")
+    override fun setIconResource(
+        view: TabScreen,
+        value: ReadableMap?,
+    ) {
+        val uri = value?.getString("uri")
+
+        if (uri != null) {
+            val context = view.context
+            val source = resolveSource(context, uri)
+
+            if (source != null) {
+                loadUsingCoil(context, source) {
+                    view.icon = it
+                }
+            }
+        }
+    }
+
+    private fun loadUsingCoil(
+        context: Context,
+        source: RNSImageSource,
+        onLoad: (img: Drawable) -> Unit,
+    ) {
+        val data =
+            when (source) {
+                is RNSImageSource.DrawableRes -> source.resId
+                is RNSImageSource.UriString -> source.uri
+            }
+
+        val request =
+            ImageRequest
+                .Builder(context)
+                .data(data)
+                .target { drawable ->
+                    val stateDrawable = drawable.asDrawable(context.resources)
+                    onLoad(stateDrawable)
+                }.listener(
+                    onError = { _, result ->
+                        Log.e("[RNScreens]", "Error loading image: $data", result.throwable)
+                    },
+                    onCancel = {
+                        Log.w("[RNScreens]", "Image loading request cancelled: $data")
+                    },
+                ).build()
+
+        imageLoader?.enqueue(request)
+    }
+
+    private fun resolveSource(
+        context: Context,
+        uri: String,
+    ): RNSImageSource? {
+        // In release builds, assets are coming with bundle and we need to work with resource id.
+        // In debug, metro is responsible for handling assets via http.
+        // At the moment, we're supporting images (drawable) and SVG icons (raw).
+        // For any other type, we may consider adding a support in the future if needed.
+        if (uri.startsWith("_")) {
+            val drawableResId = context.resources.getIdentifier(uri, "drawable", context.packageName)
+            if (drawableResId != 0) {
+                return RNSImageSource.DrawableRes(drawableResId)
+            }
+
+            val rawResId = context.resources.getIdentifier(uri, "raw", context.packageName)
+            if (rawResId != 0) {
+                return RNSImageSource.DrawableRes(rawResId)
+            }
+
+            Log.e("[RNScreens]", "Resource not found in drawable or raw: $uri")
+            return null
+        }
+
+        // If asset isn't included in android source directories and we're loading it from given path.
+        return RNSImageSource.UriString(uri)
+    }
+
+    private sealed class RNSImageSource {
+        data class DrawableRes(
+            val resId: Int,
+        ) : RNSImageSource()
+
+        data class UriString(
+            val uri: String,
+        ) : RNSImageSource()
+    }
+
     companion object {
         const val REACT_CLASS = "RNSBottomTabsScreen"
     }
